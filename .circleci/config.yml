# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

jobs:
  get_last_deployment_id:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: get last deployment id
          command: aws cloudformation list-exports --query "Exports[?Name==\`PipelineID\`].Value" --no-paginate --output text > ~/lastDeploymentId.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - lastDeploymentId.txt

  print_old_pipeline_id:
    docker:
      - image: amazon/aws-cli
    steps:
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run: 
          name:
          command: |
              export OLD_PIPELINE_ID=$(cat ~/lastDeploymentId.txt)
              echo ${OLD_PIPELINE_ID}

  create_and_deploy_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: 
          name: create S3 bucket
          command: aws cloudformation deploy --template-file bucket.yml --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7} --parameter-overrides MyBucketName="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"

  promote_to_production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: deploy to cloudfront
          command: aws cloudformation deploy --template-file cloudfront.yml --stack-name production-distro --parameter-overrides PipelineID="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"

  clean_up_old_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: clean up old stack
          command: |
            export OLD_PIPELINE_ID=$(cat ~/lastDeploymentId.txt)
            echo ${OLD_PIPELINE_ID}
            aws s3 rm "s3://${OLD_PIPELINE_ID}" --recursive
            aws cloudformation delete-stack --stack-name "${OLD_PIPELINE_ID}"

# Orchestrate or schedule a set of jobs
workflows:
  create_deploy_infrastructure:
    jobs:
      - get_last_deployment_id
      - create_and_deploy_front_end
      - promote_to_production:
          requires: [create_and_deploy_front_end]
      - clean_up_old_front_end:
          requires: [promote_to_production]
